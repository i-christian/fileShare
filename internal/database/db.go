// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.checkIfAPIKeyExistsStmt, err = db.PrepareContext(ctx, checkIfAPIKeyExists); err != nil {
		return nil, fmt.Errorf("error preparing query CheckIfAPIKeyExists: %w", err)
	}
	if q.checkIfEmailExistsStmt, err = db.PrepareContext(ctx, checkIfEmailExists); err != nil {
		return nil, fmt.Errorf("error preparing query CheckIfEmailExists: %w", err)
	}
	if q.createApiKeyStmt, err = db.PrepareContext(ctx, createApiKey); err != nil {
		return nil, fmt.Errorf("error preparing query CreateApiKey: %w", err)
	}
	if q.createRefreshTokenStmt, err = db.PrepareContext(ctx, createRefreshToken); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRefreshToken: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteApiKeyStmt, err = db.PrepareContext(ctx, deleteApiKey); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteApiKey: %w", err)
	}
	if q.deleteRefreshTokenStmt, err = db.PrepareContext(ctx, deleteRefreshToken); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRefreshToken: %w", err)
	}
	if q.getApiKeyByPrefixStmt, err = db.PrepareContext(ctx, getApiKeyByPrefix); err != nil {
		return nil, fmt.Errorf("error preparing query GetApiKeyByPrefix: %w", err)
	}
	if q.getRefreshTokenStmt, err = db.PrepareContext(ctx, getRefreshToken); err != nil {
		return nil, fmt.Errorf("error preparing query GetRefreshToken: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.listApiKeysByUserStmt, err = db.PrepareContext(ctx, listApiKeysByUser); err != nil {
		return nil, fmt.Errorf("error preparing query ListApiKeysByUser: %w", err)
	}
	if q.revokeApiKeyStmt, err = db.PrepareContext(ctx, revokeApiKey); err != nil {
		return nil, fmt.Errorf("error preparing query RevokeApiKey: %w", err)
	}
	if q.revokeRefreshTokenStmt, err = db.PrepareContext(ctx, revokeRefreshToken); err != nil {
		return nil, fmt.Errorf("error preparing query RevokeRefreshToken: %w", err)
	}
	if q.updateApiKeyLastUsedStmt, err = db.PrepareContext(ctx, updateApiKeyLastUsed); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateApiKeyLastUsed: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.checkIfAPIKeyExistsStmt != nil {
		if cerr := q.checkIfAPIKeyExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkIfAPIKeyExistsStmt: %w", cerr)
		}
	}
	if q.checkIfEmailExistsStmt != nil {
		if cerr := q.checkIfEmailExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkIfEmailExistsStmt: %w", cerr)
		}
	}
	if q.createApiKeyStmt != nil {
		if cerr := q.createApiKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createApiKeyStmt: %w", cerr)
		}
	}
	if q.createRefreshTokenStmt != nil {
		if cerr := q.createRefreshTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRefreshTokenStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteApiKeyStmt != nil {
		if cerr := q.deleteApiKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteApiKeyStmt: %w", cerr)
		}
	}
	if q.deleteRefreshTokenStmt != nil {
		if cerr := q.deleteRefreshTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRefreshTokenStmt: %w", cerr)
		}
	}
	if q.getApiKeyByPrefixStmt != nil {
		if cerr := q.getApiKeyByPrefixStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getApiKeyByPrefixStmt: %w", cerr)
		}
	}
	if q.getRefreshTokenStmt != nil {
		if cerr := q.getRefreshTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRefreshTokenStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.listApiKeysByUserStmt != nil {
		if cerr := q.listApiKeysByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listApiKeysByUserStmt: %w", cerr)
		}
	}
	if q.revokeApiKeyStmt != nil {
		if cerr := q.revokeApiKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing revokeApiKeyStmt: %w", cerr)
		}
	}
	if q.revokeRefreshTokenStmt != nil {
		if cerr := q.revokeRefreshTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing revokeRefreshTokenStmt: %w", cerr)
		}
	}
	if q.updateApiKeyLastUsedStmt != nil {
		if cerr := q.updateApiKeyLastUsedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateApiKeyLastUsedStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                       DBTX
	tx                       *sql.Tx
	checkIfAPIKeyExistsStmt  *sql.Stmt
	checkIfEmailExistsStmt   *sql.Stmt
	createApiKeyStmt         *sql.Stmt
	createRefreshTokenStmt   *sql.Stmt
	createUserStmt           *sql.Stmt
	deleteApiKeyStmt         *sql.Stmt
	deleteRefreshTokenStmt   *sql.Stmt
	getApiKeyByPrefixStmt    *sql.Stmt
	getRefreshTokenStmt      *sql.Stmt
	getUserByEmailStmt       *sql.Stmt
	getUserByIDStmt          *sql.Stmt
	listApiKeysByUserStmt    *sql.Stmt
	revokeApiKeyStmt         *sql.Stmt
	revokeRefreshTokenStmt   *sql.Stmt
	updateApiKeyLastUsedStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                       tx,
		tx:                       tx,
		checkIfAPIKeyExistsStmt:  q.checkIfAPIKeyExistsStmt,
		checkIfEmailExistsStmt:   q.checkIfEmailExistsStmt,
		createApiKeyStmt:         q.createApiKeyStmt,
		createRefreshTokenStmt:   q.createRefreshTokenStmt,
		createUserStmt:           q.createUserStmt,
		deleteApiKeyStmt:         q.deleteApiKeyStmt,
		deleteRefreshTokenStmt:   q.deleteRefreshTokenStmt,
		getApiKeyByPrefixStmt:    q.getApiKeyByPrefixStmt,
		getRefreshTokenStmt:      q.getRefreshTokenStmt,
		getUserByEmailStmt:       q.getUserByEmailStmt,
		getUserByIDStmt:          q.getUserByIDStmt,
		listApiKeysByUserStmt:    q.listApiKeysByUserStmt,
		revokeApiKeyStmt:         q.revokeApiKeyStmt,
		revokeRefreshTokenStmt:   q.revokeRefreshTokenStmt,
		updateApiKeyLastUsedStmt: q.updateApiKeyLastUsedStmt,
	}
}
