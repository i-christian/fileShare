// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const checkIfEmailExists = `-- name: CheckIfEmailExists :one
select
    count(email)
from users
    where email = $1
`

func (q *Queries) CheckIfEmailExists(ctx context.Context, email string) (int64, error) {
	row := q.queryRow(ctx, q.checkIfEmailExistsStmt, checkIfEmailExists, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
insert into users (first_name, last_name, email,  password_hash)
    values($1, $2, $3, $4)
on conflict(email)
    do nothing
returning user_id, last_name, first_name, email, is_verified, role, password_hash, created_at, updated_at, last_login
`

type CreateUserParams struct {
	FirstName    string `json:"first_name"`
	LastName     string `json:"last_name"`
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
}

// CreateUser adds a new user into the database returning user information.
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PasswordHash,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.LastName,
		&i.FirstName,
		&i.Email,
		&i.IsVerified,
		&i.Role,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select
    user_id,
    email,
    first_name,
    last_name,
    password_hash,
    is_verified,
    last_login
from users
    where email = $1
`

type GetUserByEmailRow struct {
	UserID       uuid.UUID    `json:"user_id"`
	Email        string       `json:"email"`
	FirstName    string       `json:"first_name"`
	LastName     string       `json:"last_name"`
	PasswordHash string       `json:"password_hash"`
	IsVerified   bool         `json:"is_verified"`
	LastLogin    sql.NullTime `json:"last_login"`
}

// GetUserByEmail retrieves a user from the database by email.
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.PasswordHash,
		&i.IsVerified,
		&i.LastLogin,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select
    user_id,
    email,
    first_name,
    last_name,
    is_verified,
    role
from users
    where user_id = $1
`

type GetUserByIDRow struct {
	UserID     uuid.UUID `json:"user_id"`
	Email      string    `json:"email"`
	FirstName  string    `json:"first_name"`
	LastName   string    `json:"last_name"`
	IsVerified bool      `json:"is_verified"`
	Role       UserRole  `json:"role"`
}

func (q *Queries) GetUserByID(ctx context.Context, userID uuid.UUID) (GetUserByIDRow, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, userID)
	var i GetUserByIDRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.IsVerified,
		&i.Role,
	)
	return i, err
}
