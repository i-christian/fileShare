// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refresh_token.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
insert into refresh_tokens(user_id, token, expires_at, created_at, revoked)
    values ($1, $2, $3, $4, $5)
returning refresh_token_id
`

type CreateRefreshTokenParams struct {
	UserID    uuid.UUID `json:"user_id"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
	CreatedAt time.Time `json:"created_at"`
	Revoked   bool      `json:"revoked"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (uuid.UUID, error) {
	row := q.queryRow(ctx, q.createRefreshTokenStmt, createRefreshToken,
		arg.UserID,
		arg.Token,
		arg.ExpiresAt,
		arg.CreatedAt,
		arg.Revoked,
	)
	var refresh_token_id uuid.UUID
	err := row.Scan(&refresh_token_id)
	return refresh_token_id, err
}

const deleteRefreshToken = `-- name: DeleteRefreshToken :exec
delete from refresh_tokens where token = $1
`

func (q *Queries) DeleteRefreshToken(ctx context.Context, token string) error {
	_, err := q.exec(ctx, q.deleteRefreshTokenStmt, deleteRefreshToken, token)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
select
    refresh_token_id,
    user_id,
    token,
    expires_at,
    created_at,
    revoked
from refresh_tokens
    where token = $1
`

func (q *Queries) GetRefreshToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.queryRow(ctx, q.getRefreshTokenStmt, getRefreshToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.RefreshTokenID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.Revoked,
	)
	return i, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
update refresh_tokens
    set revoked = true
        where token = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, token string) error {
	_, err := q.exec(ctx, q.revokeRefreshTokenStmt, revokeRefreshToken, token)
	return err
}
