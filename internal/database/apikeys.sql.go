// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: apikeys.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createApiKey = `-- name: CreateApiKey :one
insert into api_keys (
    user_id,
    name,
    key_hash,
    prefix,
    scope,
    expires_at
)
values (
    $1, $2, $3, $4, $5, $6
)
returning api_key_id, user_id, name, key_hash, prefix, scope, is_revoked, revoked_at, created_at, updated_at, expires_at, last_used_at, last_used_ip
`

type CreateApiKeyParams struct {
	UserID    uuid.UUID  `json:"user_id"`
	Name      string     `json:"name"`
	KeyHash   string     `json:"key_hash"`
	Prefix    string     `json:"prefix"`
	Scope     []ApiScope `json:"scope"`
	ExpiresAt time.Time  `json:"expires_at"`
}

func (q *Queries) CreateApiKey(ctx context.Context, arg CreateApiKeyParams) (ApiKey, error) {
	row := q.queryRow(ctx, q.createApiKeyStmt, createApiKey,
		arg.UserID,
		arg.Name,
		arg.KeyHash,
		arg.Prefix,
		pq.Array(arg.Scope),
		arg.ExpiresAt,
	)
	var i ApiKey
	err := row.Scan(
		&i.ApiKeyID,
		&i.UserID,
		&i.Name,
		&i.KeyHash,
		&i.Prefix,
		pq.Array(&i.Scope),
		&i.IsRevoked,
		&i.RevokedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.LastUsedIp,
	)
	return i, err
}

const deleteApiKey = `-- name: DeleteApiKey :exec
delete from api_keys
    where api_key_id = $1
`

func (q *Queries) DeleteApiKey(ctx context.Context, apiKeyID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteApiKeyStmt, deleteApiKey, apiKeyID)
	return err
}

const getApiKeyByHash = `-- name: GetApiKeyByHash :one
select api_key_id, user_id, name, key_hash, prefix, scope, is_revoked, revoked_at, created_at, updated_at, expires_at, last_used_at, last_used_ip from api_keys where key_hash = $1
`

func (q *Queries) GetApiKeyByHash(ctx context.Context, keyHash string) (ApiKey, error) {
	row := q.queryRow(ctx, q.getApiKeyByHashStmt, getApiKeyByHash, keyHash)
	var i ApiKey
	err := row.Scan(
		&i.ApiKeyID,
		&i.UserID,
		&i.Name,
		&i.KeyHash,
		&i.Prefix,
		pq.Array(&i.Scope),
		&i.IsRevoked,
		&i.RevokedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.LastUsedIp,
	)
	return i, err
}

const listApiKeysByUser = `-- name: ListApiKeysByUser :many
select
    api_key_id,
    name,
    prefix,
    scope,
    is_revoked,
    expires_at
from api_keys
    where user_id = $1
order by created_at desc
`

type ListApiKeysByUserRow struct {
	ApiKeyID  uuid.UUID  `json:"api_key_id"`
	Name      string     `json:"name"`
	Prefix    string     `json:"prefix"`
	Scope     []ApiScope `json:"scope"`
	IsRevoked bool       `json:"is_revoked"`
	ExpiresAt time.Time  `json:"expires_at"`
}

func (q *Queries) ListApiKeysByUser(ctx context.Context, userID uuid.UUID) ([]ListApiKeysByUserRow, error) {
	rows, err := q.query(ctx, q.listApiKeysByUserStmt, listApiKeysByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListApiKeysByUserRow{}
	for rows.Next() {
		var i ListApiKeysByUserRow
		if err := rows.Scan(
			&i.ApiKeyID,
			&i.Name,
			&i.Prefix,
			pq.Array(&i.Scope),
			&i.IsRevoked,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeApiKey = `-- name: RevokeApiKey :exec
update api_keys
set is_revoked = true,
    revoked_at = now()
where api_key_id = $1
`

func (q *Queries) RevokeApiKey(ctx context.Context, apiKeyID uuid.UUID) error {
	_, err := q.exec(ctx, q.revokeApiKeyStmt, revokeApiKey, apiKeyID)
	return err
}

const updateApiKeyLastUsed = `-- name: UpdateApiKeyLastUsed :exec
update api_keys
    set last_used_at = $2
where api_key_id = $1
`

type UpdateApiKeyLastUsedParams struct {
	ApiKeyID   uuid.UUID    `json:"api_key_id"`
	LastUsedAt sql.NullTime `json:"last_used_at"`
}

func (q *Queries) UpdateApiKeyLastUsed(ctx context.Context, arg UpdateApiKeyLastUsedParams) error {
	_, err := q.exec(ctx, q.updateApiKeyLastUsedStmt, updateApiKeyLastUsed, arg.ApiKeyID, arg.LastUsedAt)
	return err
}
