// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type FileVisibility string

const (
	FileVisibilityPublic  FileVisibility = "public"
	FileVisibilityPrivate FileVisibility = "private"
)

func (e *FileVisibility) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FileVisibility(s)
	case string:
		*e = FileVisibility(s)
	default:
		return fmt.Errorf("unsupported scan type for FileVisibility: %T", src)
	}
	return nil
}

type NullFileVisibility struct {
	FileVisibility FileVisibility `json:"file_visibility"`
	Valid          bool           `json:"valid"` // Valid is true if FileVisibility is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFileVisibility) Scan(value interface{}) error {
	if value == nil {
		ns.FileVisibility, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FileVisibility.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFileVisibility) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FileVisibility), nil
}

type UploadStatus string

const (
	UploadStatusPending   UploadStatus = "pending"
	UploadStatusCompleted UploadStatus = "completed"
	UploadStatusFailed    UploadStatus = "failed"
)

func (e *UploadStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UploadStatus(s)
	case string:
		*e = UploadStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UploadStatus: %T", src)
	}
	return nil
}

type NullUploadStatus struct {
	UploadStatus UploadStatus `json:"upload_status"`
	Valid        bool         `json:"valid"` // Valid is true if UploadStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUploadStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UploadStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UploadStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUploadStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UploadStatus), nil
}

type UserRole string

const (
	UserRoleAdmin UserRole = "admin"
	UserRoleUser  UserRole = "user"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type ApiKey struct {
	ID         uuid.UUID    `json:"id"`
	UserID     uuid.UUID    `json:"user_id"`
	KeyHash    string       `json:"key_hash"`
	Prefix     string       `json:"prefix"`
	CreatedAt  time.Time    `json:"created_at"`
	LastUsedAt sql.NullTime `json:"last_used_at"`
}

type EmailVerificationToken struct {
	TokenID   uuid.UUID `json:"token_id"`
	UserID    uuid.UUID `json:"user_id"`
	Token     string    `json:"token"`
	CreatedAt time.Time `json:"created_at"`
	ExpiresAt time.Time `json:"expires_at"`
	Used      bool      `json:"used"`
}

type File struct {
	ID           uuid.UUID      `json:"id"`
	UserID       uuid.UUID      `json:"user_id"`
	Filename     string         `json:"filename"`
	StorageKey   string         `json:"storage_key"`
	MimeType     string         `json:"mime_type"`
	SizeBytes    int64          `json:"size_bytes"`
	Visibility   FileVisibility `json:"visibility"`
	ThumbnailKey sql.NullString `json:"thumbnail_key"`
	CreatedAt    time.Time      `json:"created_at"`
	UpdatedAt    time.Time      `json:"updated_at"`
}

type PasswordResetToken struct {
	TokenID   uuid.UUID `json:"token_id"`
	UserID    uuid.UUID `json:"user_id"`
	Token     string    `json:"token"`
	CreatedAt time.Time `json:"created_at"`
	ExpiresAt time.Time `json:"expires_at"`
	Used      bool      `json:"used"`
}

type ShareLink struct {
	ID              uuid.UUID      `json:"id"`
	FileID          uuid.UUID      `json:"file_id"`
	CreatedByUserID uuid.UUID      `json:"created_by_user_id"`
	Token           string         `json:"token"`
	PasswordHash    sql.NullString `json:"password_hash"`
	ExpiresAt       sql.NullTime   `json:"expires_at"`
	DownloadCount   int32          `json:"download_count"`
	CreatedAt       time.Time      `json:"created_at"`
}

type UploadSession struct {
	ID             uuid.UUID        `json:"id"`
	UserID         uuid.NullUUID    `json:"user_id"`
	FileName       string           `json:"file_name"`
	TotalChunks    int32            `json:"total_chunks"`
	UploadedChunks sql.NullInt32    `json:"uploaded_chunks"`
	Status         NullUploadStatus `json:"status"`
	CreatedAt      sql.NullTime     `json:"created_at"`
	UpdatedAt      sql.NullTime     `json:"updated_at"`
}

type User struct {
	ID           uuid.UUID    `json:"id"`
	LastName     string       `json:"last_name"`
	FirstName    string       `json:"first_name"`
	Email        string       `json:"email"`
	IsVerified   sql.NullBool `json:"is_verified"`
	Role         UserRole     `json:"role"`
	PasswordHash string       `json:"password_hash"`
	CreatedAt    time.Time    `json:"created_at"`
	UpdatedAt    time.Time    `json:"updated_at"`
}
